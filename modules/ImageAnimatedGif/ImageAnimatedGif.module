<?php
/**
*  ProcessWire 2.5.x
*  Copyright (C) 2010 by Ryan Cramer
*  Licensed under GNU/GPL v2, see LICENSE.TXT
*
*  http://www.processwire.com
*  http://www.ryancramer.com
*
*
*  This module supports resizing and cropping of animated GIFs when using GD-Library
*  (The GD-Library does not support this)
*
*  Version 2.0.2
*
*
*  This module is completely based upon the fantastic work of
*
*    * László Zsidi *  (initial classes)
*
*      http://www.gifs.hu/
*      http://www.phpclasses.org/gifsplit
*      http://www.phpclasses.org/gifmerge
*
*    * xurei *  (enhanced classes)
*
*      https://github.com/xurei/GIFDecoder_optimized
*
*
*      and Tommi Forsström (provides usage example)
*
*      http://forssto.com/gifexample/
*
*
*  ported to ProcessWire module by Horst Nogajski
*
*      https://processwire.com/talk/user/1041-horst/
*      https://processwire.com/talk/topic/8386-image-animated-gif/
*      https://processwire.com/talk/topic/8355-animated-gif-images-not-working-after-resize/
*
*/

class ImageAnimatedGif extends WireData implements Module {

    private $upscaling = null;
    private $cropping = null;
    private $cropExtra = null;
    private $image = array('width' => 0, 'height' => 0);
    private $meta = null;


    public function init() {
        if(class_exists('ImageSizerEngineAnimatedGif') || class_exists('ProcessWire\ImageSizerEngineAnimatedGif')) {
            if($this->modules->isInstalled('ImageSizerEngineAnimatedGif')) {
                return; // the core support is already installed
            }
            $this->modules->get('ImageSizerEngineAnimatedGif');  // try to install core support
            if($this->modules->isInstalled('ImageSizerEngineAnimatedGif')) {
                $this->warning('Installed Image Rendering Core Support Module for Animated GIFs!');
                $this->warning('The ImageAnimatedGif Module is obsolete now. Please uninstall it under site/modules/' . basename(dirname(__FILE__)));
                return; // now the core support is installed
            }
        }
        // there is no core support for Animated GIFs, we take it over with this third party module
        $this->pages->addHookBefore('ImageSizer::resize', $this, 'processEventBefore', array('priority'=>1));
    }


    public function ___install() {
        if(class_exists('ImageSizerEngineAnimatedGif') || class_exists('ProcessWire\ImageSizerEngineAnimatedGif')) {
            if($this->modules->isInstalled('ImageSizerEngineAnimatedGif')) {
                throw new WireException('This Module is obsolete! Imageprocessing for Animated GIFs is supported through the PW Core now!');
                return; // the core support is already installed
            }
            $this->modules->get('ImageSizerEngineAnimatedGif');  // try to install core support
            if($this->modules->isInstalled('ImageSizerEngineAnimatedGif')) {
                $this->warning('Installed Image Rendering Core Support Module for Animated GIFs!');
                throw new WireException('This Module is obsolete! Imageprocessing for Animated GIFs is supported through the PW Core now!');
                return; // now the core support is installed
            }
        }
    }


    public function processEventBefore(&$event) {
        if (1 != $event->object->imageType) return;
        if (!$this->isAnimatedGif($event->object->filename)) return;
        require_once( __DIR__ . '/libs/gif_decoder.class.php');
        require_once( __DIR__ . '/libs/gif_encoder.class.php');
        $fullWidth = $event->object->image['width'];
        $fullHeight = $event->object->image['height'];
        $finalWidth = $event->arguments[0];
        $finalHeight = $event->arguments[1];
        if (0 == $finalWidth && 0 == $finalHeight) return;
        if (0 == $finalWidth) $finalWidth = ceil(($finalHeight / $fullHeight) * $fullWidth);
        if (0 == $finalHeight) $finalHeight = ceil(($finalWidth / $fullWidth) * $fullHeight);
        $this->image = $event->object->image;
        $this->upscaling = $event->object->upscaling;
        $this->cropping = $event->object->cropping;
        $this->cropExtra = $event->object->cropExtra;
        $tmpFile = $event->object->filename . '.tmp';
        if (@copy($event->object->filename, $tmpFile) && $this->scaleAnimatedGif($event->object->filename, $tmpFile, $fullWidth, $fullHeight, $finalWidth, $finalHeight)) {
            if (@copy($tmpFile, $event->object->filename)) {
                @unlink($tmpFile);
                $event->replace = true;
                $event->return = true;
                return true;
            }
        }
    }


    protected function scaleAnimatedGif($srcFilename, $dstFilename, $fullWidth, $fullHeight, $finalWidth, $finalHeight) {
        if (is_array($this->cropExtra) && 4 == count($this->cropExtra)) { // crop before resize
            list($cropX, $cropY, $cropWidth, $cropHeight) = $this->cropExtra;
            $bg = null;
            $gif = new GIFdecoder(file_get_contents($srcFilename));
            $originalFramesMeta = $gif->GIFGetFramesMeta();
            if (count($originalFramesMeta) <= 0) return false;
            $this->meta = array(
                'delays'    => $gif->GIFGetDelays(),
                'loops'     => $gif->GIFGetLoop(),
                'disposal'  => $gif->GIFGetDisposal(),
                'tr'        => $gif->GIFGetTransparentR(),
                'tg'        => $gif->GIFGetTransparentG(),
                'tb'        => $gif->GIFGetTransparentB(),
                'trans'     => (0 == $gif->GIFGetTransparentI() ? false : true)
            );
            $originalFrames = $gif->GIFGetFrames();
            $newFrames = array();
            foreach($originalFrames as $k => $v) {
                $frame = @imagecreatefromstring($v);
                if (!is_resource($frame)) continue;
                if (!is_resource($bg)) {
                    $bg = imagecreatetruecolor($fullWidth, $fullHeight);
                    $this->prepareGDimage($bg);
                }
                $srcX = 0;
                $srcY = 0;
                $srcW = imageSX($frame);
                $srcH = imageSY($frame);
                $dstX = $originalFramesMeta[$k]['left'];
                $dstY = $originalFramesMeta[$k]['top'];
                $dstW = $originalFramesMeta[$k]['width'];
                $dstH = $originalFramesMeta[$k]['height'];
                imagecopy($bg, $frame, $dstX, $dstY, $srcX, $srcY, $srcW, $srcH);
                $newimg = imagecreatetruecolor($cropWidth, $cropHeight);
                $this->prepareGDimage($newimg);
                imagecopy($newimg, $bg, 0, 0, $cropX, $cropY, $cropWidth, $cropHeight);
                array_push($newFrames, $newimg);
                $originalFrames[$k] = null;
            }
            if (count($newFrames) > 0) {
                $frames = array();
                foreach($newFrames as $nf) {
                    if (!is_resource($nf)) continue;
                    ob_start();
                    imagegif($nf);
                    $gifdata = ob_get_clean();
                    array_push($frames, $gifdata);
                    @imagedestroy($nf);
                }
                $gifmerge = new GIFEncoder(
                    $frames,
                    $this->meta['delays'],
                    $this->meta['loops'],
                    $this->meta['disposal'],
                    $this->meta['tr'], $this->meta['tg'], $this->meta['tb'],
                    'bin'
                );
                $result = false === fwrite(fopen($srcFilename, 'wb'), $gifmerge->GetAnimation()) ? false : true;
                if ($result) {
                    $fullWidth = $cropWidth;
                    $fullHeight = $cropHeight;
                    $this->image = array('width' => $fullWidth, 'height' => $fullHeight);
                }
            }
            else {
                $result = false;
            }
            if (isset($bg) && is_resource($bg)) @imagedestroy($bg);
            if (isset($frame) && is_resource($frame)) @imagedestroy($frame);
            if (isset($newimg) && is_resource($newimg)) @imagedestroy($newimg);
            unset($gif, $gifmerge, $originalFrames, $originalFramesMeta, $newFrames, $cropHeight, $cropWidth, $cropX, $cropY, $dstH, $dstW, $dstX, $dstY, $frames, $nf, $srcH, $srcW, $srcX, $srcY);
            $this->meta = null;
        }

        $bgX = $bgY = 0;
        $bgWidth = $fullWidth;
        $bgHeight = $fullHeight;
        $resizemethod = $this->getResizemethod($bgWidth, $bgHeight, $finalWidth, $finalHeight, $bgX, $bgY);
        if (0 == $resizemethod) return true;

        $gif = new GIFdecoder(file_get_contents($srcFilename));
        $originalFramesMeta = $gif->GIFGetFramesMeta();
        if (count($originalFramesMeta) <= 0) return false;
        $this->meta = array(
            'delays'    => $gif->GIFGetDelays(),
            'loops'     => $gif->GIFGetLoop(),
            'disposal'  => $gif->GIFGetDisposal(),
            'tr'        => $gif->GIFGetTransparentR(),
            'tg'        => $gif->GIFGetTransparentG(),
            'tb'        => $gif->GIFGetTransparentB(),
            'trans'     => (0 == $gif->GIFGetTransparentI() ? false : true)
        );
        $originalFrames     = $gif->GIFGetFrames();
        $newFrames = array();

        if (2 == $resizemethod) { // 2 = resize with aspect ratio
            $bg = null;
            $ratio = 1.0;
            $ratio_w = $fullWidth / $finalWidth;
            $ratio_h = $fullHeight / $finalHeight;
            $ratio = ($ratio_h > $ratio_w ? $ratio_h : $ratio_w);
            foreach($originalFrames as $k => $v) {
                $frame = @imagecreatefromstring($v);
                if (!is_resource($frame)) continue;
                $newimg = imagecreatetruecolor($finalWidth, $finalHeight);
                $this->prepareGDimage($newimg);
                if (is_resource($bg)) {
                    imagecopy($newimg, $bg, 0, 0, 0, 0, $finalWidth, $finalHeight);
                }
                $srcX = 0;
                $srcY = 0;
                $srcW = imageSX($frame);
                $srcH = imageSY($frame);
                $dstX = floor($originalFramesMeta[$k]['left'] / $ratio);
                $dstY = floor($originalFramesMeta[$k]['top'] / $ratio);
                $dstW = ceil($originalFramesMeta[$k]['width'] / $ratio);
                $dstH = ceil($originalFramesMeta[$k]['height'] / $ratio);
                imagecopyresampled($newimg, $frame, $dstX, $dstY, $srcX, $srcY, $dstW, $dstH, $srcW, $srcH);
                array_push($newFrames, $newimg);
                if (!is_resource($bg)) {
                    $bg = imagecreatetruecolor($finalWidth, $finalHeight);
                    $this->prepareGDimage($bg);
                }
                imagecopy($bg, $newimg, 0, 0, 0, 0, $finalWidth, $finalHeight);
                $originalFrames[$k] = null;
            }
        }

        if (4 == $resizemethod) { // 4 = resize and crop from center with aspect ratio
            $bg = null;
            $ratio = 1.0;
            $ratio_w = $fullWidth / $bgWidth;
            $ratio_h = $fullHeight / $bgHeight;
            $ratio = ($ratio_h > $ratio_w ? $ratio_h : $ratio_w);
            foreach($originalFrames as $k => $v) {
                $frame = @imagecreatefromstring($v);
                if (!is_resource($frame)) continue;
                $newimg = imagecreatetruecolor($bgWidth, $bgHeight);
                $this->prepareGDimage($newimg);
                if (is_resource($bg)) {
                    imagecopy($newimg, $bg, 0, 0, 0, 0, $bgWidth, $bgHeight);
                }
                $srcX = 0;
                $srcY = 0;
                $srcW = imageSX($frame);
                $srcH = imageSY($frame);
                $dstX = floor($originalFramesMeta[$k]['left'] / $ratio);
                $dstY = floor($originalFramesMeta[$k]['top'] / $ratio);
                $dstW = ceil($originalFramesMeta[$k]['width'] / $ratio);
                $dstH = ceil($originalFramesMeta[$k]['height'] / $ratio);
                imagecopyresampled($newimg, $frame, $dstX, $dstY, $srcX, $srcY, $dstW, $dstH, $srcW, $srcH);
                if (!is_resource($bg)) {
                    $bg = imagecreatetruecolor($bgWidth, $bgHeight);
                    $this->prepareGDimage($bg);
                }
                imagecopy($bg, $newimg, 0, 0, 0, 0, $bgWidth, $bgHeight);
                $newimg = imagecreatetruecolor($finalWidth, $finalHeight);
                $this->prepareGDimage($newimg);
                imagecopy($newimg, $bg, 0, 0, $bgX, $bgY, $finalWidth, $finalHeight);
                array_push($newFrames, $newimg);
                $originalFrames[$k] = null;
            }
        }

        if (count($newFrames) > 0) {
            $frames = array();
            foreach($newFrames as $nf) {
                if (!is_resource($nf)) continue;
                ob_start();
                imagegif($nf);
                $gifdata = ob_get_clean();
                array_push($frames, $gifdata);
                @imagedestroy($nf);
            }
            $gifmerge = new GIFEncoder(
                $frames,
                $this->meta['delays'],
                $this->meta['loops'],
                $this->meta['disposal'],
                $this->meta['tr'], $this->meta['tg'], $this->meta['tb'],
                'bin'
            );
            $result = false === fwrite(fopen($dstFilename, 'wb'), $gifmerge->GetAnimation()) ? false : true;
        }
        else {
            $result = false;
        }

        if (isset($bg) && is_resource($bg)) @imagedestroy($bg);
        if (isset($frame) && is_resource($frame)) @imagedestroy($frame);
        if (isset($newimg) && is_resource($newimg)) @imagedestroy($newimg);

        return $result;
    }


    ######## helpers ###################

    private function isAnimatedGif($filename) {
        return 1 < preg_match_all('/\x00\x21\xF9\x04.{4}\x00(\x2C|\x21)/s', file_get_contents($filename));
    }

    private function getResizeDimensions($targetWidth, $targetHeight) {
        $pWidth = $targetWidth;
        $pHeight = $targetHeight;
        $img =& $this->image;
        if(!$targetHeight) $targetHeight = round(($targetWidth / $img['width']) * $img['height']);
        if(!$targetWidth) $targetWidth = round(($targetHeight / $img['height']) * $img['width']);
        $originalTargetWidth = $targetWidth;
        $originalTargetHeight = $targetHeight;
        if($img['width'] < $img['height']) {
            $pHeight = $this->getProportionalHeight($targetWidth);
        } else {
            $pWidth = $this->getProportionalWidth($targetHeight);
        }
        if($pWidth < $targetWidth) {
            $pWidth = $targetWidth;
            $pHeight = $this->getProportionalHeight($targetWidth);
        }
        if($pHeight < $targetHeight) {
            $pHeight = $targetHeight;
            $pWidth = $this->getProportionalWidth($targetHeight);
        }
        if(!$this->upscaling) {
            while($pWidth > $img['width'] || $pHeight > $img['height']) {
                if($pWidth > $img['width']) {
                    $pWidth = $img['width'];
                    $pHeight = $this->getProportionalHeight($pWidth);
                }
                if($pHeight > $img['height']) {
                    $pHeight = $img['height'];
                    $pWidth = $this->getProportionalWidth($pHeight);
                }
                if($targetWidth > $pWidth) $targetWidth = $pWidth;
                if($targetHeight > $pHeight) $targetHeight = $pHeight;
                if(!$this->cropping) {
                    $targetWidth = $pWidth;
                    $targetHeight = $pHeight;
                }
            }
        }
        if(!$this->cropping) {
            if($pHeight > $originalTargetHeight) {
                $pHeight = $originalTargetHeight;
                $pWidth = $this->getProportionalWidth($pHeight);
                $targetWidth = $pWidth;
                $targetHeight = $pHeight;
            }
            if($pWidth > $originalTargetWidth) {
                $pWidth = $originalTargetWidth;
                $pHeight = $this->getProportionalHeight($pWidth);
                $targetWidth = $pWidth;
                $targetHeight = $pHeight;
            }
        }
        $r = array(
                0 => (int) $pWidth,
                1 => (int) $pHeight,
                2 => (int) $targetWidth,
                3 => (int) $targetHeight
                );
        return $r;
    }

    private function getProportionalWidth($targetHeight) {
        $img =& $this->image;
        return ceil(($targetHeight / $img['height']) * $img['width']);
    }

    private function getProportionalHeight($targetWidth) {
        $img =& $this->image;
        return ceil(($targetWidth / $img['width']) * $img['height']);
    }

    private function getResizemethod(&$gdWidth, &$gdHeight, &$targetWidth, &$targetHeight, &$x1, &$y1) {
        list($gdWidth, $gdHeight, $targetWidth, $targetHeight) = $this->getResizeDimensions($targetWidth, $targetHeight);
        $x1 = ($gdWidth / 2) - ($targetWidth / 2);
        $y1 = ($gdHeight / 2) - ($targetHeight / 2);
        $this->getCropDimensions($x1, $y1, $gdWidth, $targetWidth, $gdHeight, $targetHeight);
        if ($gdWidth == $targetWidth && $gdWidth == $this->image['width'] &&  $gdHeight == $this->image['height'] && $gdHeight == $targetHeight) return 0;
        if ($gdWidth == $targetWidth && $gdHeight == $targetHeight) return 2;
        return 4;
    }

    private function getCropDimensions(&$w1, &$h1, $gdWidth, $targetWidth, $gdHeight, $targetHeight) {
        if(is_string($this->cropping)) {
            switch($this->cropping) {
                case 'nw':
                    $w1 = 0;
                    $h1 = 0;
                    break;
                case 'n':
                    $h1 = 0;
                    break;
                case 'ne':
                    $w1 = $gdWidth - $targetWidth;
                    $h1 = 0;
                    break;
                case 'w':
                    $w1 = 0;
                    break;
                case 'e':
                    $w1 = $gdWidth - $targetWidth;
                    break;
                case 'sw':
                    $w1 = 0;
                    $h1 = $gdHeight - $targetHeight;
                    break;
                case 's':
                    $h1 = $gdHeight - $targetHeight;
                    break;
                case 'se':
                    $w1 = $gdWidth - $targetWidth;
                    $h1 = $gdHeight - $targetHeight;
                    break;
                default:
            }
        } else if(is_array($this->cropping)) {
            if(strpos($this->cropping[0], '%') === false) $pointX = (int) $this->cropping[0];
                else $pointX = $gdWidth * ((int) $this->cropping[0] / 100);
            if(strpos($this->cropping[1], '%') === false) $pointY = (int) $this->cropping[1];
                else $pointY = $gdHeight * ((int) $this->cropping[1] / 100);
            if($pointX < $targetWidth / 2) $w1 = 0;
                else if($pointX > ($gdWidth - $targetWidth / 2)) $w1 = $gdWidth - $targetWidth;
                else $w1 = $pointX - $targetWidth / 2;
            if($pointY < $targetHeight / 2) $h1 = 0;
                else if($pointY > ($gdHeight - $targetHeight / 2)) $h1 = $gdHeight - $targetHeight;
                else $h1 = $pointY - $targetHeight / 2;
        }
    }

    private function prepareGDimage(&$gdimage) {
        if (!$this->meta['trans']) return;
        $transparentNew = imagecolorallocate($gdimage, $this->meta['tr'], $this->meta['tg'], $this->meta['tb']);
        $transparentNewIndex = imagecolortransparent($gdimage, $transparentNew);
        imagefill($gdimage, 0, 0, $transparentNewIndex);
    }

}
